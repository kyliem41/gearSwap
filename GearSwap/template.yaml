AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GearSwap - Streamlined SAM Template

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Runtime: python3.12
    Architectures: 
      - x86_64
    Environment:
      Variables:
        DB_HOST: "gearswapdb.cfs4ukyuq1o9.us-east-2.rds.amazonaws.com"
        DB_USER: "postgres"
        DB_PASSWORD: "postgres"
        DB_PORT: "5432"
    VpcConfig:
      SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
      SubnetIds: !Ref SubnetIds
    Layers:
      - !Ref DependenciesLayer

Parameters:
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the Lambda functions will be deployed

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-05b31ac071b580a8c
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda functions
      ContentUri: ./ 
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  UserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users
            Method: POST
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users/{Id}
            Method: GET
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users/{Id}
            Method: PUT
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users/{Id}
            Method: DELETE
        GetUsersFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users/following/{Id}
            Method: GET
        GetUsersFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /users/followers/{Id}
            Method: GET

  UserProfileApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  UserProfileFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: userProfile/
      Handler: app.lambda_handler
      Events:
        CreateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserProfileApi
            Path: /userProfile{Id}
            Method: POST
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserProfileApi
            Path: /userProfile/{Id}
            Method: GET
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserProfileApi
            Path: /userProfile/{Id}
            Method: PUT
        DeleteProfile:
          Type: Api
          Properties:
            RestApiId: !Ref UserProfileApi
            Path: /userProfile/{Id}
            Method: DELETE

Outputs:
  UserApiUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserFunctionsArn:
    Description: User Functions ARN
    Value: !GetAtt UserFunctions.Arn
  UserProfileFunctionsArn:
    Description: UserProfile Functions ARN
    Value: !GetAtt UserProfileFunctions.Arn