AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GearSwap

  Sample SAM Template for GearSwap

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DB_HOST: "gearswap.cfs4ukyuq1o9.us-east-2.rds.amazonaws.com"
        DB_NAME: "gearSwap"
        DB_USER: "postgres"
        DB_PASSWORD: "postgres"

Resources:
  PsycopgLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: psycopg2-layer
      Description: Layer for psycopg2
      ContentUri: psycopg2-layer/python/
      CompatibleRuntimes:
        - python3.12

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  # users
  getUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: getUserById.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        getUser:
          Type: Api
          Properties:
            Path: /users
            Method: get
      Layers:
        - !Ref PsycopgLayer

  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  #auth
  # auth:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: auth/
  #     Handler: auth.lambda_handler
  #     Runtime: python3.12
  #     Policies:
  #       - AWSLambdaBasicExecutionRole

  # #login
  # loginFunc:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: login.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: auth/
  #     Events:
  #       login:
  #         Type: Api
  #         Properties:
  #           Path: /login/{email}
  #           Method: post
  #     Layers:
  #       - !Ref PsycopgLayer

  # #posts
  # posts:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: posts.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: posts/
  #     Events:
  #       getPost:
  #         Type: Api
  #         Properties:
  #           Path: /posts/{id}
  #           Method: get
  #       createPost:
  #         Type: Api
  #         Properties:
  #           Path: /posts
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #profile
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #cart
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #outfit
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #search
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #styler
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

  # #interests
  # users:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: users.lambda_handler
  #     Runtime: python3.12
  #     CodeUri: users/
  #     Events:
  #       getUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: get
  #       createUser:
  #         Type: Api
  #         Properties:
  #           Path: /users
  #           Method: post
  #       updateUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: put
  #       deleteUser:
  #         Type: Api
  #         Properties:
  #           Path: /users/{id}
  #           Method: delete
  #       getUserFollowers:
  #         Type: Api
  #         Properties:
  #           Path: /users/followers/{userId}
  #           Method: get
  #       getUserFollowing:
  #         Type: Api
  #         Properties:
  #           Path: /users/following/{userId}
  #           Method: get
  #     Layers:
  #       - !Ref PsycopgLayer

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
