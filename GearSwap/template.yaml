AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GearSwap - Streamlined SAM Template

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Runtime: python3.12
    Architectures: 
      - x86_64
    Environment:
      Variables:
        DB_HOST: "capdb.cfs4ukyuq1o9.us-east-2.rds.amazonaws.com"
        DB_USER: "postgres"
        DB_PASSWORD: "postgres"
        DB_PORT: "5432"
        WORKOS_CLIENT_ID: "client_01JA67H9AXQGPC28X9JHF3TB0F"
        WORKOS_API_KEY: "sk_test_a2V5XzAxSkE2N0g4UllEODUxMEVSVkFCRjJEN1czLGNISXJXdmsyck84QjJoZVJ2c0dNdGx4SmY"
        COGNITO_USER_POOL_ID: !Ref UserPool #"us-east-2_y5z7hsmC1"
        COGNITO_CLIENT_ID: !Ref UserPoolClient #"1u996ubaotokbh9aq9rg3771ku"
    VpcConfig:
      SecurityGroupIds: 
        - sg-07e026f3fb32eb128
        - !Ref LambdaSecurityGroup
      SubnetIds: !Ref SubnetIds
    Layers:
      - !Ref DependenciesLayer

Parameters:
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the Lambda functions will be deployed

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:DescribeUserPoolClient
                Resource: 
                  # - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-east-2_y5z7hsmC1
                  - !GetAtt UserPool.Arn
                  - !Sub ${UserPool.Arn}/client/*

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-0bb7af1b6c9530541
      SecurityGroupEgress:
        - IpProtocol: -1
          # FromPort: -1
          # ToPort: -1
          CidrIp: 0.0.0.0/0

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda functions
      ContentUri: ./layer
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Select [0, !Ref SubnetIds]

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-0bb7af1b6c9530541

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  gearSwap:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: gearPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: gearPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
  
  # Login Function
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: logIn/
      Handler: logIn.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /login
            Method: POST

  # User Functions
  UserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users
            Method: POST
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: GET
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: PUT
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: DELETE
        GetUsersFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/following/{Id}
            Method: GET
        GetUsersFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/followers/{Id}
            Method: GET

  # UserProfile Functions
  UserProfileFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: userProfile/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: POST
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: GET
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: PUT
        DeleteProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: DELETE

  # Cart Functions
  CartFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cart/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: POST
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: GET
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: PUT
        DeleteProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: DELETE

  # Posts Functions
  PostsFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: posts/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreatePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{userId}
            Method: POST
        GetAllPosts:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts
            Method: GET
        GetPostById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{userId}/{postId}
            Method: GET
        UpdatePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{userId}/{postId}
            Method: PUT
        DeletePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{userId}/{postId}
            Method: DELETE
        GetPostsByFilter:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/filter/{userId}
            Method: GET

  # Search Functions
  SearchFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        PostSearch:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}
            Method: POST
        GetSearchHistory:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}
            Method: GET
        DeleteSearch:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}/{searchId}
            Method: DELETE

  # LikedPost Functions
  LikedPostFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: likedPosts/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        AddLikedPost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}
            Method: POST
        GetLikedPosts:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}
            Method: GET
        RemoveLikedPost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}/{postId}
            Method: DELETE
        GetLikedPostById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}/{postId}
            Method: GET
  
  # Outfit Functions
  OutfitFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: outfit/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}
            Method: POST
        GetOutfits:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}
            Method: GET
        PutOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: PUT
        DeleteOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: DELETE
        GetOutfitById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: GET
        AddItemByOutfitId:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/item/{userId}/{outfitId}
            Method: POST
        RemoveItemByOutfitId:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/item/{userId}/{outfitId}
            Method: DELETE

  # Styler Functions
  StylerFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: styler/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RefreshStyler:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/{userId}
            Method: POST
        GetStyleTips:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/{userId}
            Method: GET
        GenerateOutfitByWardrobe:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/wardrobe/{userId}
            Method: POST
        GetSimilarItems:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/similar/{postId}
            Method: GET
        GetTrendingItems:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/trending
            Method: GET
        GetStyleAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/analysis/{userId}
            Method: GET
        GenerateOutfitRec:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/outfit/{userId}
            Method: POST
        GenerateItemRec:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/item/{userId}
            Method: POST
        GetStylePreferences:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/preferences/{userId}
            Method: GET
        PutStylePreferences:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/preferences/{userId}
            Method: PUT

Outputs:
  gearSwapUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${gearSwap}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserFunctionsArn:
    Description: User Functions ARN
    Value: !GetAtt UserFunctions.Arn
  UserProfileFunctionsArn:
    Description: UserProfile Functions ARN
    Value: !GetAtt UserProfileFunctions.Arn
  CartFunctionsArn:
    Description: Cart Functions ARN
    Value: !GetAtt CartFunctions.Arn
  PostsFunctionsArn:
    Description: Posts Functions ARN
    Value: !GetAtt PostsFunctions.Arn
  SearchFunctionsArn:
    Description: Search Functions ARN
    Value: !GetAtt SearchFunctions.Arn
  LikedPostFunctionsArn:
    Description: LikedPost Functions ARN
    Value: !GetAtt LikedPostFunctions.Arn
  OutfitFunctionsArn:
    Description: Outfit Functions ARN
    Value: !GetAtt OutfitFunctions.Arn
  StylerFunctionsArn:
    Description: Styler Functions ARN
    Value: !GetAtt StylerFunctions.Arn