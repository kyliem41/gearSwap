AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GearSwap

  Sample SAM Template for GearSwap

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        DB_HOST: "gearswapdb.cfs4ukyuq1o9.us-east-2.rds.amazonaws.com"
        DB_USER: "postgres"
        DB_PASSWORD: "postgres"
        DB_PORT: "5432"

Parameters:
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the Lambda function will be deployed (minimum of 2 subnets required)

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: vpc-05b31ac071b580a8c
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda function
      ContentUri: ./ 
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  createUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: createUser.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users
            Method: post
      Layers:
        - !Ref DependenciesLayer

  getAllUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: getUsers.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
      Layers:
        - !Ref DependenciesLayer

  getUserById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: getUserById.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getUserById:
          Type: Api
          Properties:
            Path: /users/{Id}
            Method: get
      Layers:
        - !Ref DependenciesLayer

  putUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: putUser.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users/{Id}
            Method: put
      Layers:
        - !Ref DependenciesLayer

  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: deleteUser.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users/{Id}
            Method: delete
      Layers:
        - !Ref DependenciesLayer
    
  getUsersFollowing:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/following/
      Handler: getUsersFollowing.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users/following/{Id}
            Method: get
      Layers:
        - !Ref DependenciesLayer

  getUsersFollowers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/followers/
      Handler: getUsersFollowers.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds: 
        - sg-03c19dd98d5aa9665
        - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Events:
        getAllUsers:
          Type: Api
          Properties:
            Path: /users/followers/{Id}
            Method: get
      Layers:
        - !Ref DependenciesLayer

Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
