AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: GearSwap - Streamlined SAM Template

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.12
    
    Architectures: 
      - x86_64
    Environment:
      Variables:
        DB_HOST: "capdb.cfs4ukyuq1o9.us-east-2.rds.amazonaws.com"
        DB_USER: "postgres"
        DB_PASSWORD: "postgres"
        DB_PORT: "5432"
        RABBITMQ_HOST: "amqps://b-cc6042ef-5a23-4da4-9ae7-75adf6ccea4d.mq.us-east-2.amazonaws.com:5671"
        RABBITMQ_PORT: "5671"
        RABBITMQ_USER: "myguest"
        RABBITMQ_PASSWORD: "Guest1234!@#"
        SES_SENDER_EMAIL: !Ref SESSenderEmail
        COGNITO_USER_POOL_ID: !Ref UserPool
        COGNITO_CLIENT_ID: !Ref UserPoolClient
        AuthorizerResultTtlInSeconds: 0
        OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:/gearswap/${ENV}/OPENAI_API_KEY:SecretString}}'
        FINE_TUNED_MODEL_ID: !Sub '{{resolve:ssm:/gearswap/${ENV}/FINE_TUNED_MODEL_ID}}'
        ENV: !Ref ENV
        WEBSOCKET_API_DOMAIN: !Sub "${websocketApi}.execute-api.${AWS::Region}.amazonaws.com"
        WEBSOCKET_API_STAGE: Prod
    VpcConfig:
      SecurityGroupIds: 
        - sg-07e026f3fb32eb128
        - !Ref LambdaSecurityGroup
      SubnetIds: !Split [",", !Select [0, !Ref SubnetIds]]
    Layers:
      - !Ref DependenciesLayer

Parameters:
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the Lambda functions will be deployed
  ENV:
    Type: String
    Description: Environment for the Lambda functions
    Default: dev
  SESDomain:
    Type: String
    Description: Domain to verify for SES (optional)
    Default: "kylierhodus.org"
  SESRegion:
    Type: String
    Default: us-east-2
    Description: AWS Region for SES
  SESSenderEmail:
    Type: String
    Description: Verified sender email for SES
  SESConfigurationSet:
    Type: String
    Description: SES Configuration Set Name (optional)
    Default: "GearSwapEmailConfig"
  GmailEmail:
    Type: String
    Description: Gmail address for sending emails
    Default: ""
    NoEcho: true
  GmailPassword:
    Type: String
    Description: Gmail app-specific password
    Default: ""
    NoEcho: true  
  YahooEmail:
    Type: String
    Description: Yahoo address for sending emails
    Default: ""
    NoEcho: true
  YahooPassword:
    Type: String
    Description: Yahoo app-specific password
    Default: ""
    NoEcho: true  
  OutlookEmail:
    Type: String
    Description: Outlook address for sending emails
    Default: ""
    NoEcho: true
  OutlookPassword:
    Type: String
    Description: Outlook password or app password
    Default: ""
    NoEcho: true    
  Office365Email:
    Type: String
    Description: Office 365 address for sending emails
    Default: ""
    NoEcho: true
  Office365Password:
    Type: String
    Description: Office 365 password or app password
    Default: ""
    NoEcho: true

Conditions:
  CreateConfigSet: !Not [!Equals [!Ref SESConfigurationSet, ""]]
  VerifyDomain: !Not [!Equals [!Ref SESDomain, ""]]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/gearswap/${ENV}/*'
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/gearswap/${ENV}/*'
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:ListUsers
                Resource: 
                  - !GetAtt UserPool.Arn
                  - !Sub ${UserPool.Arn}/client/*
        - PolicyName: AmazonMQAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mq:Connect
                  - mq:SendMessage
                  - mq:ReceiveMessage
                Resource:
                  - !Sub arn:aws:mq:${AWS::Region}:${AWS::AccountId}:broker:*
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                Resource: 
                  - !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'
                  - !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/${SESConfigurationSet}'
              - Effect: Allow
                Action:
                  - ses:GetSendQuota
                  - ses:GetSendStatistics
                Resource: "*"
        - PolicyName: WebSocketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:ManageConnections'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${websocketApi}/*'

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-0bb7af1b6c9530541
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the Lambda functions
      ContentUri: ./
      CompatibleRuntimes:
        - python3.12
    Metadata:
      BuildMethod: python3.12
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Select [0, !Ref SubnetIds]

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-0bb7af1b6c9530541

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  gearSwap:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - '*/*'
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Accept'"
        AllowOrigin: "'*'"
        MaxAge: "'7200'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization
            Type: COGNITO_USER_POOLS

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: gearPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: gearPoolClient
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AccessTokenValidity: 60 
      IdTokenValidity: 60     
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days

  EmailLoggingGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ses/${AWS::StackName}"
      RetentionInDays: 14

  EmailMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt EmailLoggingGroup.Arn

  SESDomainIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref SESSenderEmail
      ConfigurationSetAttributes:
        ConfigurationSetName: !Ref SESConfigurationSet
      DkimAttributes:
        SigningEnabled: true

  SESConfigurationSetResource:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Ref SESConfigurationSet
      DeliveryOptions:
        TlsPolicy: REQUIRE
      ReputationOptions:
        ReputationMetricsEnabled: true
      SendingOptions:
        SendingEnabled: true
      
  SESEventDestination:
    Type: AWS::SES::ConfigurationSetEventDestination
    DependsOn: SESConfigurationSetResource
    Properties:
      ConfigurationSetName: !Ref SESConfigurationSet
      EventDestination:
        Name: "EmailEventLogging"
        Enabled: true
        MatchingEventTypes:
          - "send"
          - "reject"
          - "bounce"
          - "complaint"
          - "delivery"
        CloudWatchDestination:
          DimensionConfigurations:
            - DimensionName: "Source"
              DimensionValueSource: "MessageTag"
              DefaultDimensionValue: "Unknown"

  # Login Function
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: logIn/
      Handler: logIn.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /login
            Method: POST
            Auth:
              Authorizer: NONE
        LoginOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /login
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # Email Verification Function
  EmailServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rabbitmq/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          GMAIL_EMAIL: !Ref GmailEmail
          GMAIL_PASSWORD: !Ref GmailPassword          
          YAHOO_EMAIL: !Ref YahooEmail
          YAHOO_PASSWORD: !Ref YahooPassword          
          OUTLOOK_EMAIL: !Ref OutlookEmail
          OUTLOOK_PASSWORD: !Ref OutlookPassword          
          OFFICE365_EMAIL: !Ref Office365Email
          OFFICE365_PASSWORD: !Ref Office365Password
          SES_REGION: !Ref SESRegion
          SES_SENDER_EMAIL: !Sub "noreply@${SESDomain}"
          SES_CONFIGURATION_SET: !Ref SESConfigurationSet
          FLUTTER_APP_URL: !Sub "https://${SESDomain}"
      Events:
        RequestPasswordReset:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password-reset/request
            Method: POST
            Auth:
              Authorizer: NONE
        RequestPasswordResetOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password-reset/request
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        VerifyPasswordReset:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password-reset/verify
            Method: POST
            Auth:
              Authorizer: NONE
        VerifyPasswordResetOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password-reset/verify
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # User Functions
  UserFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users
            Method: POST
            Auth:
              Authorizer: NONE
        UserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: GET
        UserByIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: PUT
        UpdateUserPassword:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password/{Id}
            Method: PUT
        UpdateUserPasswordOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/password/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/{Id}
            Method: DELETE
        FollowUser:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/follow/{Id}
            Method: POST
        FollowUserOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/follow/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetUsersFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/following/{Id}
            Method: GET
        GetUsersFollowingOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/following/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetUsersFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/followers/{Id}
            Method: GET
        GetUsersFollowersOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /users/followers/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # UserProfile Functions
  UserProfileFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: userProfile/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: POST
        ProfileOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: GET
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: PUT
        DeleteProfile:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}
            Method: DELETE
        UpdateProfilePicture:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}/profilePicture
            Method: PUT
        ProfilePictureOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /userProfile/{Id}/profilePicture
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # Cart Functions
  CartFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cart/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateCart:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: POST
        CartOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetCart:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: GET
        UpdateCart:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: PUT
        DeleteCart:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /cart/{Id}
            Method: DELETE

  # Posts Functions
  PostsFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: posts/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreatePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/create/{userId}
            Method: POST
        CreatePostOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/create/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetAllPosts:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts
            Method: GET
        GetAllPostsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetPostById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}
            Method: GET
        GetPostByIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        UpdatePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/update/{userId}/{postId}
            Method: PUT
        UpdatePostOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/update/{userId}/{postId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        DeletePost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/delete/{userId}/{postId}
            Method: DELETE
        DeletePostOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/delete/{userId}/{postId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetPostsByFilter:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/filter/{userId}
            Method: GET
        GetPostsByFilterOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/filter/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        AddImage:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images
            Method: POST
        GetPostImages:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images
            Method: GET
        ImageOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetImage:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images/{imageId}
            Method: GET
        DeleteImage:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images/{imageId}
            Method: DELETE
        PostImageOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /posts/{postId}/images/{imageId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # Search Functions
  SearchFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        PostSearch:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}
            Method: POST
        SearchOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetSearchHistory:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}
            Method: GET
        DeleteSearch:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}/{searchId}
            Method: DELETE
        DeleteSearchOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /search/{userId}/{searchId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  # LikedPost Functions
  LikedPostFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: likedPosts/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        AddLikedPost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}
            Method: POST
        LikedPostOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetLikedPosts:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}
            Method: GET
        RemoveLikedPost:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}/{postId}
            Method: DELETE
        RemoveLikedPostOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}/{postId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetLikedPostById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /likedPosts/{userId}/{postId}
            Method: GET
  
  # Outfit Functions
  OutfitFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: outfit/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CreateOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}
            Method: POST
        OutfitOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetOutfits:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}
            Method: GET
        PutOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: PUT
        PutOutfitOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        DeleteOutfit:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: DELETE
        GetOutfitById:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/{userId}/{outfitId}
            Method: GET
        AddItemByOutfitId:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/item/{userId}/{outfitId}
            Method: POST
        AddItemByOutfitIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/item/{userId}/{outfitId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        RemoveItemByOutfitId:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /outfit/item/{userId}/{outfitId}
            Method: DELETE

  # Styler Functions
  StylerFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: styler/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        StylerChat:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/chat/{userId}
            Method: POST
        StylerChatOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/chat/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        StylerChatHistory:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/chat/{userId}/history
            Method: GET
        StylerChatHistoryOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/chat/{userId}/history
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        RefreshStyler:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/{userId}
            Method: POST
        StylerOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetStyleTips:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/{userId}
            Method: GET
        GenerateOutfitByWardrobe:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/wardrobe/{userId}
            Method: POST
        GenerateOutfitByWardrobeOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/wardrobe/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetSimilarItems:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/similar/{postId}
            Method: GET
        GetSimilarItemsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/similar/{postId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetTrendingItems:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/trending
            Method: GET
        GetTrendingItemsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/trending
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetStyleAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/analysis/{userId}
            Method: GET
        GetStyleAnalysisOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/analysis/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GenerateOutfitRec:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/outfit/{userId}
            Method: POST
        GenerateOutfitRecOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/outfit/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GenerateItemRec:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/item/{userId}
            Method: POST
        GenerateItemRecOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/item/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetStylePreferences:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/preferences/{userId}
            Method: GET
        GetStylePreferencesOptions:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/preferences/{userId}
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        PutStylePreferences:
          Type: Api
          Properties:
            RestApiId: !Ref gearSwap
            Path: /styler/preferences/{userId}
            Method: PUT

  # Chat Functions
  websocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: gearSwapWebsocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref websocketApi
      StageName: Prod
      DeploymentId: !Ref WebSocketDeployment
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
      - BroadcastRoute
    Properties:
      ApiId: !Ref websocketApi

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join ['/', ['integrations', !Ref ConnectIntegration]]

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join ['/', ['integrations', !Ref DisconnectIntegration]]

  BroadcastRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: broadcast
      AuthorizationType: NONE
      OperationName: BroadcastRoute
      Target: !Join ['/', ['integrations', !Ref BroadcastIntegration]]

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: sendMessage
      AuthorizationType: NONE
      OperationName: MessageRoute
      Target: !Join ['/', ['integrations', !Ref MessageIntegration]]

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations

  BroadcastIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketBroadcastFunction.Arn}/invocations

  # WebSocket Lambda Functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: connect.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn

  WebSocketConnectPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketConnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${websocketApi}/*/$connect'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: disconnect.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn

  WebSocketDisconnectPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketDisconnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${websocketApi}/*/$disconnect'

  WebSocketMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: message.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn

  WebSocketMessagePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketMessageFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${websocketApi}/*/sendMessage'

  WebSocketBroadcastFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: broadcast.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn

  WebSocketBroadcastPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebSocketBroadcastFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${websocketApi}/*/broadcast'

  DefaultRoute:   
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref websocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join ['/', ['integrations', !Ref DefaultIntegration]]

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref websocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultFunction.Arn}/invocations

  DefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: websocket/
      Handler: default.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn

Outputs:
  gearSwapUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${gearSwap}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserFunctionsArn:
    Description: User Functions ARN
    Value: !GetAtt UserFunctions.Arn
  UserProfileFunctionsArn:
    Description: UserProfile Functions ARN
    Value: !GetAtt UserProfileFunctions.Arn
  CartFunctionsArn:
    Description: Cart Functions ARN
    Value: !GetAtt CartFunctions.Arn
  PostsFunctionsArn:
    Description: Posts Functions ARN
    Value: !GetAtt PostsFunctions.Arn
  SearchFunctionsArn:
    Description: Search Functions ARN
    Value: !GetAtt SearchFunctions.Arn
  LikedPostFunctionsArn:
    Description: LikedPost Functions ARN
    Value: !GetAtt LikedPostFunctions.Arn
  OutfitFunctionsArn:
    Description: Outfit Functions ARN
    Value: !GetAtt OutfitFunctions.Arn
  StylerFunctionsArn:
    Description: Styler Functions ARN
    Value: !GetAtt StylerFunctions.Arn
  EmailLogGroupName:
    Description: CloudWatch Log Group for Email Events
    Value: !Ref EmailLoggingGroup
  EmailMetricsRoleArn:
    Description: IAM Role ARN for Email Metrics
    Value: !GetAtt EmailMetricsRole.Arn
  SESConfigurationSetName:
    Description: SES Configuration Set Name
    Condition: CreateConfigSet
    Value: !Ref SESConfigurationSet
  SESDomainIdentityName:
    Description: SES Domain Identity
    Condition: VerifyDomain
    Value: !Ref SESDomain
  WebSocketEndpoint:
    Description: "WebSocket API endpoint"
    Value: !Sub wss://${websocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}